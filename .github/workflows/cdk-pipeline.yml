name: Deploy Go via CDK

env:
  AWSCERT: arn:aws:acm:eu-west-2:407461997746:certificate/9083a66b-72b6-448d-9bce-6ee2e2e52e36
  CLOUDFLARE_ACCOUNT_ID: "212aab16e8e2f88974a456b8097b2726"
  CLOUDFLARE_ZONE_ID: "dabase.com"

on:
  schedule:
    - cron: 0 0 * * *
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  staging:
    runs-on: ubuntu-latest
    name: Deploy to staging
    environment:
      name: staging
      url: https://${{ env.STAGING_DOMAIN }}
    env:
      STAGING_DOMAIN: stghello.dabase.com
      CDK_STACK_NAME: stghello-dabase-com
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
      - uses: golang/govulncheck-action@v1
      - uses: golangci/golangci-lint-action@v7
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::407461997746:role/github-actions-Role-56IHHM969DKJ
          aws-region: eu-west-2
      - uses: actions/setup-node@v4
      - name: Run CDK deploy
        run: |
          npx aws-cdk@2.x deploy --require-approval never --outputs-file outputs.json
        env:
          DOMAIN: ${{ env.STAGING_DOMAIN }}
      - name: Read CDK outputs and set env var
        id: cdk-outputs
        run: echo "API_DOMAIN_VALUE=$(jq -r '.${{ env.CDK_STACK_NAME }}.APIGatewayDomain' outputs.json)" >> $GITHUB_ENV
      - name: Deploy Lambda code via script
        run: ./deploy.sh
        env:
          CDK_STACK_NAME: ${{ env.CDK_STACK_NAME }}
      - name: Verify deployment on API Gateway domain
        run: |
          echo "Verifying deployment at https://${{ env.API_DOMAIN_VALUE }} with Host header ${{ env.STAGING_DOMAIN }}"
          if [ -z "${{ env.API_DOMAIN_VALUE }}" ]; then
            echo "Error: API_DOMAIN_VALUE is empty. Cannot verify deployment."
            exit 1
          fi
          curl -is -H "Host: ${{ env.STAGING_DOMAIN }}" https://${{ env.API_DOMAIN_VALUE }} | grep x-version | grep ${GITHUB_SHA::7}
      - name: Update Cloudflare DNS
        uses: everpcpc/cloudflare-dns-action@v1
        with:
          type: "CNAME"
          name: ${{ env.STAGING_DOMAIN }}
          content: ${{ env.API_DOMAIN_VALUE }}
          ttl: 1
          proxied: false
          token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          zone: ${{ secrets.CLOUDFLARE_ZONE }}
      - name: Verify DNS
        run: |
          if [ -z "${{ env.API_DOMAIN_VALUE }}" ]; then
            echo "Error: API_DOMAIN_VALUE is empty. Cannot verify DNS."
            exit 1
          fi
          EXPECTED=${{ env.API_DOMAIN_VALUE }}
          ACTUAL=$(dig +short CNAME ${{ env.STAGING_DOMAIN }})
          echo "Expected API Gateway Domain: $EXPECTED"
          echo "Actual CNAME record: ${ACTUAL%.}"
          [ "$EXPECTED" = "${ACTUAL%.}" ] && echo "✅ DNS is correctly configured" || { echo "❌ DNS configuration mismatch" ; exit 1; }
      - name: Verify deployment on custom domain
        run: curl -is https://${{ env.STAGING_DOMAIN }} | grep x-version | grep ${GITHUB_SHA::7}

  production:
    runs-on: ubuntu-latest
    needs: staging
    name: Deploy to production
    environment:
      name: production
      url: https://${{ env.PRODUCTION_DOMAIN }}
    env:
      PRODUCTION_DOMAIN: hello.dabase.com
      CDK_STACK_NAME: hello-dabase-com
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::407461997746:role/github-actions-Role-56IHHM969DKJ
          aws-region: eu-west-2
      - uses: actions/setup-node@v4
      - name: Run CDK deploy
        run: |
          npx aws-cdk@2.x deploy --require-approval never --outputs-file outputs.json
        env:
          DOMAIN: ${{ env.PRODUCTION_DOMAIN }}
      - name: Read CDK outputs and set env var
        id: cdk-outputs-prod
        run: echo "API_DOMAIN_VALUE=$(jq -r '.${{ env.CDK_STACK_NAME }}.APIGatewayDomain' outputs.json)" >> $GITHUB_ENV
      - name: Deploy Lambda code via script
        run: ./deploy.sh
        env:
          CDK_STACK_NAME: ${{ env.CDK_STACK_NAME }}
      - name: Verify deployment on API Gateway domain
        run: |
          echo "Verifying deployment at https://${{ env.API_DOMAIN_VALUE }} with Host header ${{ env.PRODUCTION_DOMAIN }}"
          if [ -z "${{ env.API_DOMAIN_VALUE }}" ]; then
            echo "Error: API_DOMAIN_VALUE is empty. Cannot verify deployment."
            exit 1
          fi
          curl -is -H "Host: ${{ env.PRODUCTION_DOMAIN }}" https://${{ env.API_DOMAIN_VALUE }} | grep x-version | grep ${GITHUB_SHA::7}
      - name: Update Cloudflare DNS
        uses: everpcpc/cloudflare-dns-action@v1
        with:
          type: "CNAME"
          name: ${{ env.PRODUCTION_DOMAIN }}
          content: ${{ env.API_DOMAIN_VALUE }}
          ttl: 1
          proxied: false
          token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          zone: ${{ secrets.CLOUDFLARE_ZONE }}
      - name: Verify DNS
        run: |
          if [ -z "${{ env.API_DOMAIN_VALUE }}" ]; then
            echo "Error: API_DOMAIN_VALUE is empty. Cannot verify DNS."
            exit 1
          fi
          EXPECTED=${{ env.API_DOMAIN_VALUE }}
          ACTUAL=$(dig +short CNAME ${{ env.PRODUCTION_DOMAIN }})
          echo "Expected API Gateway Domain: $EXPECTED"
          echo "Actual CNAME record: ${ACTUAL%.}"
          [ "$EXPECTED" = "${ACTUAL%.}" ] && echo "✅ DNS is correctly configured" || { echo "❌ DNS configuration mismatch" ; exit 1; }
      - name: Verify deployment on custom domain
        run: curl -is https://${{ env.PRODUCTION_DOMAIN }} | grep x-version | grep ${GITHUB_SHA::7}

